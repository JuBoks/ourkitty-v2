# -*- coding: utf-8 -*-
"""Image_Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uBdctGmBuAQIOGf7Y_Vg-ho7NnJ9j_7-
"""

import os
import numpy as np
import cv2
import shutil
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.metrics.pairwise import euclidean_distances
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.mobilenet import MobileNet, preprocess_input
import matplotlib.pyplot as plt
from utils.common import resize_img, empty_directory

img_size = 224
base_path = "datasets/0_files"
tnr_image_path = os.path.abspath("datasets/3_tnr/input")


# 이미지 속 특징 추출 함수
def extract_features(directory):
    # Load the MobileNet model
    model = MobileNet(weights="imagenet", include_top=False)

    features = []
    for img_name in os.listdir(directory):
        # Check if the file is a valid image file
        # if img_name.split(".")[-1].lower() in (".jpg"):
        #     continue

        # Load the image and preprocess it
        img_path = os.path.join(directory, img_name)
        img = cv2.imread(img_path)
        img, ratio, top, left = resize_img(img, img_size)
        x = image.img_to_array(img)
        x = np.expand_dims(x, axis=0)
        x = preprocess_input(x)

        # Extract features using the MobileNet model
        features.append(model.predict(x, verbose=0).ravel())

    return np.array(features)


# cluster_image 함수의 K 값을 계산하는 함수 (Elbow Method)
def calculate_num_of_cluster(features):
    # Determine the optimal number of clusters using the elbow method
    start = 1
    end = 11
    wcss = []
    for i in range(start, end):
        kmeans = KMeans(n_clusters=i, n_init=10, init="k-means++", random_state=42)
        kmeans.fit(features)
        wcss.append(kmeans.inertia_)

    ## Elbow Method 그래프 visualize
    # plt.plot(range(start, end), wcss, marker='o')
    # plt.title('Elbow Method')
    # plt.xlabel('Number of clusters')
    # plt.ylabel('WCSS')
    # plt.show()

    delta_wcss = [0] + [abs(wcss[i] - wcss[i - 1]) for i, _ in enumerate(wcss) if i > 0]

    elbow_point = 1
    flag = 0
    for i, _ in enumerate(delta_wcss[elbow_point:-1], elbow_point):
        a = delta_wcss[i]
        b = delta_wcss[i + 1]
        result = a / b
        if result > flag:
            flag = result
        else:
            elbow_point = i - 1
            break

    num_of_cluster = elbow_point + start

    return num_of_cluster


def copy_images(representative_images, serial_number):
    empty_directory(f"{tnr_image_path}/*")
    # 시리얼번호에 따른 경로 찾기
    folder_name = os.environ[f"{serial_number}"]
    directory = os.path.abspath(f"{base_path}/{folder_name}")

    for el in representative_images:
        img = el[1]
        shutil.copy(f"{directory}/{img}", f"{tnr_image_path}/{img}")


# 특징을 기반으로 클러스터 수 계산하는 함수
def cluster_images(serial_number):
    # 시리얼번호에 따른 경로 찾기
    folder_name = os.environ[f"{serial_number}"]
    directory = os.path.abspath(f"{base_path}/{folder_name}")
    # 이미지 속 특징 추출
    print("extract_features is processing ...")
    features = extract_features(directory)
    print("extract_features is done ...")
    # K 계산
    print("calculate_num_of_cluster is processing ...")
    num_clusters = calculate_num_of_cluster(features)
    print("calculate_num_of_cluster is done ...")

    print("KMeans is processing ...")
    kmeans = KMeans(n_clusters=num_clusters, random_state=42).fit(features)
    print("KMeans is done ...")
    # Get the centroids
    centroids = kmeans.cluster_centers_

    # Find the representative image for each cluster
    representative_images = []
    image_paths = [
        os.path.join(directory, img_name)
        for img_name in os.listdir(directory)
        if img_name.endswith(".jpg")
    ]

    for i, img_path in enumerate(image_paths):
        img_name = os.path.basename(img_path)
        distances = euclidean_distances(features[i].reshape(1, -1), centroids)
        closest_centroid = int(np.argmin(distances))
        if len(representative_images) < num_clusters:
            # Add the first image for this centroid
            representative_images.append([closest_centroid, img_name])
        elif (
            distances[0, closest_centroid]
            < distances[0, representative_images[closest_centroid][0]]
        ):
            # Replace the current representative image with a closer one
            representative_images[closest_centroid] = [closest_centroid, img_name]

    # Save representative images for tnr model
    copy_images(representative_images, serial_number)

    # # Print the representative images for each cluster
    # for i in range(num_clusters):
    #     print(f"Cluster {i}: {representative_images[i][1]}")

    # Find the closest 5 images to the center of each cluster
    closest_images = [[] for _ in range(num_clusters)]
    for i, img_path in enumerate(image_paths):
        distances = euclidean_distances(features[i].reshape(1, -1), centroids)
        closest_centroid = int(np.argmin(distances))
        dist_to_centroid = distances[0, closest_centroid]
        closest_images[closest_centroid].append(
            (dist_to_centroid, os.path.basename(img_path))
        )
    for i in range(num_clusters):
        closest_images[i] = sorted(closest_images[i], key=lambda x: x[0])[:5]
        closest_images[i] = [img[1] for img in closest_images[i]]

    # Reduce the dimensionality of the features to 2 dimensions using PCA(차원 flatten)
    pca = PCA(n_components=2)
    pca_features = pca.fit_transform(features)

    # # Plot the clusters using a scatter plot with annotated data points
    # fig, ax = plt.subplots()
    # scatter = ax.scatter(pca_features[:, 0], pca_features[:, 1], c=kmeans.labels_, cmap='rainbow')
    # ax.set_xlabel('Principal Component 1')
    # ax.set_ylabel('Principal Component 2')

    # # Annotate each data point with its corresponding image name
    # for i, img_path in enumerate(image_paths):
    #     img_name = os.path.basename(img_path)
    #     ax.annotate(img_name, (pca_features[i, 0], pca_features[i, 1]))
    # plt.show()

    # # Plot the clusters using a scatter plot with annotated data points and images
    # fig, ax = plt.subplots()
    # scatter = ax.scatter(pca_features[:, 0], pca_features[:, 1], c=kmeans.labels_, cmap='rainbow')
    # ax.set_xlabel('Principal Component 1')
    # ax.set_ylabel('Principal Component 2')

    # # Annotate each data point with its corresponding image
    # for i, filename in enumerate(os.listdir(directory)):
    #     img = cv2.imread(os.path.join(directory, filename))
    #     resized_img = cv2.resize(img, (50,50)) # resize the grayscale image
    #     imagebox = OffsetImage(resized_img, zoom=0.5)
    #     ab = AnnotationBbox(imagebox, (pca_features[i, 0], pca_features[i, 1]), pad=0, frameon=False)
    #     ax.add_artist(ab)
    # plt.show()

    # Code for Visualizing in Web-Front-End
    # 1) Calculate Width, Height
    x_max = 0
    x_min = 0
    y_max = 0
    y_min = 0

    for i in range(len(pca_features[:, 1])):
        if pca_features[i][0] > x_max:
            x_max = pca_features[i][0]
        if pca_features[i][0] < x_min:
            x_min = pca_features[i][0]
        if pca_features[i][1] > y_max:
            y_max = pca_features[i][1]
        if pca_features[i][1] < y_min:
            y_min = pca_features[i][1]

    width = abs(x_max - x_min)
    height = abs(y_max - y_min)

    # 2) file name , class number, x value, y value append
    file_feature_info = []
    for i, img_path in enumerate(image_paths):
        img_name = os.path.basename(img_path)
        file_feature_info.append(
            [
                img_name,
                int(kmeans.labels_[i]),
                float(pca_features[i, 0] + abs(x_min)),
                float(pca_features[i, 1] + abs(y_min)),
            ]
        )

    result = {
        "status": 0,  # 0: AI가 판별, 1: 유저가 수정, -1: invalid
        "num_clusters": num_clusters,  # K
        "representative_images": representative_images,  # 대표사진
        "width": float(width),  # width
        "height": float(height),  # height
        "file_feature_info": file_feature_info,  # 경로, index, x, y
        "closest_images": closest_images,  # index의 대표사진
    }
    return result


# dummy data
# (3,                                           # K
#  [(0, '3.jpg'), (1, '6.jpg'), (2, '1.jpg')],  # 대표사진
#  267.26077,                                   # width
#  270.55,                                      # height
#  [['3.jpg', 0, 71.57071, 111.77724],          # 경로, index, x, y
#   ['2.jpg', 0, 41.0467, 101.42038],
#   ['1.jpg', 2, 49.631702, 252.10735],
#   ['0.jpg', 2, 12.834763, 176.58102],
#   ['4.jpg', 2, 28.2919, 151.14479],
#   ['6.jpg', 1, 254.79837, 141.90945],
#   ['5.jpg', 0, 22.79058, 74.65587],
#   ['7.jpg', 1, 195.51935, 91.77804],
#   ['8.jpg', 0, 54.92993, 48.761253],
#   ['9.jpg', 0, 40.544697, 64.34909],
#   ['10.jpg', 0, 19.524696, 54.39917],
#   ['11.jpg', 0, 52.408337, 56.88038],
#   ['12.jpg', 1, 211.37228, 94.71065],
#   ['13.jpg', 2, 32.694572, 235.4797],
#   ['14.jpg', 0, 109.535164, 129.39938],
#   ['17.jpg', 0, 25.00898, 24.846169],
#   ['16.jpg', 2, 54.69484, 152.23784],
#   ['15.jpg', 1, 183.62985, 94.7214],
#   ['18.jpg', 1, 196.38367, 130.75847],
#   ['19.jpg', 0, 41.61738, 27.082611],
#   ['20.jpg', 1, 199.3173, 113.068924],
#   ['21.jpg', 0, 52.543175, 58.12816],
#   ['22.jpg', 1, 225.2274, 122.27282],
#   ['23.jpg', 0, 57.92103, 45.267006],
#   ['24.jpg', 1, 236.5495, 121.08354],
#   ['25.jpg', 0, 40.414185, 97.17588],
#   ['26.jpg', 0, 34.120018, 17.18473],
#   ['27.jpg', 1, 227.28836, 99.77349],
#   ['28.jpg', 1, 177.34216, 123.60785],
#   ['29.jpg', 2, 37.765614, 150.95364],
#   ['30.jpg', 2, 11.470383, 158.49673],
#   ['31.jpg', 1, 211.47641, 92.91335],
#   ['32.jpg', 1, 235.59164, 115.43089],
#   ['33.jpg', 0, 29.085, 39.657623],
#   ['34.jpg', 2, 58.608807, 163.43275],
#   ['35.jpg', 0, 32.335777, 61.21032],
#   ['36.jpg', 0, 94.89561, 89.362114],
#   ['37.jpg', 2, 38.824398, 254.21228],
#   ['38.jpg', 2, 18.672096, 219.79608],
#   ['39.jpg', 0, 68.92717, 56.378487],
#   ['40.jpg', 0, 42.17767, 132.33784],
#   ['41.jpg', 0, 39.00404, 3.4219208],
#   ['42.jpg', 1, 164.97939, 146.09076],
#   ['43.jpg', 0, 27.331345, 73.73674],
#   ['44.jpg', 0, 61.00064, 126.22621],
#   ['45.jpg', 0, 30.498558, 68.19556],
#   ['47.jpg', 2, 33.997795, 199.05582],
#   ['46.jpg', 1, 219.04861, 124.77716],
#   ['49.jpg', 2, 65.23575, 249.86029],
#   ['48.jpg', 0, 28.16082, 46.855667],
#   ['50.jpg', 0, 9.158745, 22.818924],
#   ['51.jpg', 1, 164.01414, 102.86966],
#   ['52.jpg', 1, 240.78229, 125.85113],
#   ['53.jpg', 2, 41.605232, 219.64046],
#   ['54.jpg', 2, 36.583397, 215.63434],
#   ['55.jpg', 0, 18.979256, 93.180664],
#   ['57.jpg', 1, 236.17712, 127.80042],
#   ['56.jpg', 2, 21.13459, 157.65451],
#   ['58.jpg', 1, 213.5827, 107.71001],
#   ['59.jpg', 0, 16.247643, 15.528519],
#   ['60.jpg', 2, 59.998596, 270.55],
#   ['61.jpg', 0, 50.28612, 38.05114],
#   ['62.jpg', 1, 235.43372, 153.72662],
#   ['63.jpg', 2, 26.745049, 254.63857],
#   ['64.jpg', 1, 220.46938, 89.80915],
#   ['65.jpg', 0, 29.174934, 93.735146],
#   ['66.jpg', 1, 239.827, 107.79251],
#   ['67.jpg', 2, 54.20246, 152.41634],
#   ['68.jpg', 1, 212.49017, 98.614],
#   ['69.jpg', 1, 175.85497, 105.0857],
#   ['70.jpg', 1, 230.24533, 81.579895],
#   ['71.jpg', 1, 192.2457, 82.78],
#   ['72.jpg', 1, 210.78085, 92.52037],
#   ['73.jpg', 1, 251.22751, 140.36241],
#   ['74.jpg', 0, 53.13016, 93.10957],
#   ['75.jpg', 0, 32.04651, 29.648125],
#   ['76.jpg', 0, 52.431507, 132.2591],
#   ['77.jpg', 2, 57.130013, 254.71933],
#   ['78.jpg', 0, 41.751457, 87.983765],
#   ['79.jpg', 1, 232.14487, 134.06522],
#   ['80.jpg', 1, 224.8172, 98.3957],
#   ['81.jpg', 2, 46.00853, 225.99467],
#   ['83.jpg', 2, 46.02967, 106.90201],
#   ['82.jpg', 0, 69.75663, 111.292435],
#   ['84.jpg', 0, 5.1871567, 54.642406],
#   ['85.jpg', 0, 82.504265, 75.56199],
#   ['87.jpg', 2, 3.8824692, 143.55495],
#   ['86.jpg', 1, 236.75906, 106.58425],
#   ['88.jpg', 1, 216.79878, 107.01613],
#   ['89.jpg', 2, 21.932198, 247.96841],
#   ['91.jpg', 0, 54.03388, 114.41772],
#   ['90.jpg', 2, 34.40239, 225.32431],
#   ['92.jpg', 0, 56.6285, 104.850464],
#   ['93.jpg', 1, 237.83316, 105.7505],
#   ['94.jpg', 0, 39.275265, 54.12791],
#   ['95.jpg', 0, 39.386803, 130.27592],
#   ['96.jpg', 1, 224.15894, 115.58183],
#   ['97.jpg', 0, 28.213074, 47.803078],
#   ['98.jpg', 0, 91.12428, 110.95196],
#   ['99.jpg', 1, 220.00552, 125.1203],
#   ['100.jpg', 1, 203.06122, 129.37384],
#   ['101.jpg', 0, 16.031898, 30.982513],
#   ['102.jpg', 2, 72.78517, 231.715],
#   ['103.jpg', 1, 261.68823, 107.924065],
#   ['104.jpg', 0, 92.56003, 83.39889],
#   ['105.jpg', 2, 0.0, 158.56972],
#   ['106.jpg', 0, 40.183224, 97.73258],
#   ['107.jpg', 0, 69.98772, 98.09317],
#   ['108.jpg', 1, 240.11136, 91.79106],
#   ['109.jpg', 1, 148.35573, 111.252335],
#   ['110.jpg', 0, 18.625534, 46.174103],
#   ['111.jpg', 0, 35.99259, 110.119965],
#   ['112.jpg', 1, 220.44946, 103.995865],
#   ['113.jpg', 0, 2.3731537, 44.25528],
#   ['114.jpg', 0, 10.6477585, 75.59511],
#   ['115.jpg', 1, 198.8482, 105.817184],
#   ['116.jpg', 2, 54.14415, 160.16167],
#   ['117.jpg', 0, 9.256027, 40.1157],
#   ['118.jpg', 0, 8.465446, 50.596703],
#   ['119.jpg', 0, 121.98218, 133.66052],
#   ['120.jpg', 0, 109.312515, 135.05858],
#   ['121.jpg', 0, 71.48219, 89.18885],
#   ['123.jpg', 1, 233.33148, 101.69512],
#   ['122.jpg', 0, 34.639084, 3.8365402],
#   ['124.jpg', 1, 191.61891, 98.38623],
#   ['125.jpg', 2, 9.56575, 150.17902],
#   ['126.jpg', 0, 21.537315, 74.244995],
#   ['127.jpg', 2, 29.810966, 249.24518],
#   ['128.jpg', 2, 22.703003, 150.18979],
#   ['129.jpg', 0, 116.85839, 78.01022],
#   ['130.jpg', 2, 34.374245, 106.28292],
#   ['131.jpg', 0, 35.280487, 16.495712],
#   ['132.jpg', 2, 44.43131, 156.14728],
#   ['133.jpg', 2, 51.33373, 219.61862],
#   ['134.jpg', 0, 23.806831, 7.6750946],
#   ['136.jpg', 2, 7.491699, 150.9678],
#   ['135.jpg', 1, 239.81924, 103.66757],
#   ['137.jpg', 0, 48.757877, 77.12573],
#   ['138.jpg', 2, 35.25573, 221.56407],
#   ['139.jpg', 1, 164.57655, 104.23725],
#   ['141.jpg', 2, 36.43007, 209.67165],
#   ['140.jpg', 1, 207.052, 101.78697],
#   ['142.jpg', 1, 200.76176, 127.02528],
#   ['143.jpg', 0, 34.533638, 16.557014],
#   ['144.jpg', 0, 60.127014, 117.90646],
#   ['145.jpg', 1, 140.49066, 117.91235],
#   ['146.jpg', 1, 267.26077, 107.4081],
#   ['147.jpg', 0, 27.817146, 28.947746],
#   ['148.jpg', 2, 17.27732, 173.98822],
#   ['149.jpg', 0, 52.23276, 79.40516],
#   ['150.jpg', 2, 24.942726, 136.39577],
#   ['151.jpg', 0, 17.27179, 49.6263],
#   ['152.jpg', 1, 215.79092, 89.9403],
#   ['153.jpg', 2, 29.573662, 254.03384],
#   ['154.jpg', 0, 105.86081, 113.49915],
#   ['155.jpg', 0, 55.185806, 107.08469],
#   ['156.jpg', 1, 226.31015, 101.406334],
#   ['157.jpg', 1, 166.10712, 114.08231],
#   ['158.jpg', 2, 44.999077, 162.9722],
#   ['159.jpg', 2, 35.358208, 198.38643],
#   ['161.jpg', 1, 242.71872, 125.067986],
#   ['160.jpg', 1, 230.5481, 125.585556],
#   ['162.jpg', 0, 45.761936, 49.466084],
#   ['163.jpg', 1, 217.4426, 82.542915],
#   ['164.jpg', 0, 5.7901764, 44.509552],
#   ['166.jpg', 2, 19.441078, 234.38641],
#   ['165.jpg', 2, 29.288406, 184.7355],
#   ['167.jpg', 1, 245.31705, 147.10423],
#   ['169.jpg', 0, 69.13907, 127.642365],
#   ['168.jpg', 2, 36.06105, 157.58952],
#   ['171.jpg', 1, 234.36029, 130.31929],
#   ['170.jpg', 0, 17.15332, 19.18087],
#   ['172.jpg', 0, 16.497253, 62.547478],
#   ['175.jpg', 0, 67.512985, 64.237915],
#   ['174.jpg', 0, 82.26107, 123.805534],
#   ['173.jpg', 1, 174.46016, 90.66423],
#   ['176.jpg', 1, 227.38895, 107.3786],
#   ['177.jpg', 1, 232.95596, 111.47613],
#   ['178.jpg', 1, 249.74945, 112.98498],
#   ['180.jpg', 0, 29.044395, 16.060913],
#   ['179.jpg', 0, 15.629875, 66.81381],
#   ['181.jpg', 1, 169.58612, 127.7339],
#   ['182.jpg', 2, 32.356033, 166.12364],
#   ['183.jpg', 1, 163.22977, 91.741745],
#   ['184.jpg', 1, 144.79446, 90.05416],
#   ['185.jpg', 0, 53.422028, 138.13023],
#   ['186.jpg', 1, 199.84421, 96.16864],
#   ['187.jpg', 1, 257.46854, 103.327934],
#   ['188.jpg', 1, 201.25299, 121.055786],
#   ['189.jpg', 1, 210.19327, 102.13665],
#   ['190.jpg', 1, 196.08636, 76.33525],
#   ['191.jpg', 2, 36.358437, 217.88559],
#   ['192.jpg', 0, 56.05323, 76.25368],
#   ['193.jpg', 0, 68.93141, 67.99224],
#   ['194.jpg', 1, 206.45648, 126.77557],
#   ['197.jpg', 0, 53.7984, 55.35802],
#   ['195.jpg', 0, 73.71025, 118.952385],
#   ['196.jpg', 1, 217.4104, 95.169495],
#   ['198.jpg', 0, 41.69914, 18.440369],
#   ['199.jpg', 1, 236.88095, 118.26295],
#   ['200.jpg', 0, 24.611328, 0.0],
#   ['201.jpg', 2, 13.331711, 158.45703],
#   ['203.jpg', 0, 22.961662, 10.031525],
#   ['202.jpg', 2, 36.665207, 208.53375],
#   ['204.jpg', 2, 17.232895, 155.85439],
#   ['205.jpg', 0, 34.246895, 70.10777],
#   ['206.jpg', 1, 140.73509, 128.63838],
#   ['207.jpg', 2, 2.8840408, 177.55688],
#   ['208.jpg', 0, 30.700523, 11.974869],
#   ['209.jpg', 0, 18.143494, 7.3006287],
#   ['210.jpg', 1, 214.89136, 114.76429],
#   ['211.jpg', 0, 89.26843, 118.963264],
#   ['212.jpg', 2, 6.6429596, 162.59294],
#   ['213.jpg', 1, 235.01462, 97.04335],
#   ['214.jpg', 1, 210.85701, 142.98265],
#   ['215.jpg', 1, 205.24214, 110.97684],
#   ['216.jpg', 2, 43.5798, 147.63629],
#   ['218.jpg', 1, 255.89847, 121.30325],
#   ['217.jpg', 2, 32.703156, 156.28328],
#   ['219.jpg', 1, 178.16003, 124.56317]],
#  [['170.jpg', '50.jpg', '134.jpg', '209.jpg', '198.jpg'],     # index의 대표사진 -> 대표사진에 대해서 tnr filtering -> 평균값(미구현)
#   ['152.jpg', '123.jpg', '163.jpg', '146.jpg', '108.jpg'],
#   ['138.jpg', '54.jpg', '105.jpg', '133.jpg', '158.jpg']])
